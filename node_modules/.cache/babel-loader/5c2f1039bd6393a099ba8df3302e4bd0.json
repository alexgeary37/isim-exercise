{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/isim-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport scale from './assets/radaltback.png';\nimport cover from './assets/radaltcover.png';\nimport needle from './assets/radaltneedle.png';\nimport bugImg from './assets/bug.png';\nimport flagImg from './assets/radaltflag.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [hasPower, setHasPower] = useState(false);\n  const [imageDiameter, setImageDiameter] = useState(0);\n  const [altitude, setAltitude] = useState(0); // To store the altitude value when power is off and user changes dial position.\n\n  const [altitudeWithoutPower, setAltitudeWithoutPower] = useState(0);\n  const [bugValue, setBugValue] = useState(0);\n  const [lightIsOn, setLightIsOn] = useState(false); // Get the diameter of the image for positioning dials.\n\n  const initialiseImageDiameter = ({\n    target: img\n  }) => {\n    setImageDiameter(img.width);\n  };\n\n  const toggleHasPower = () => {\n    if (!hasPower) {\n      // Power is going to be turned on, so set altitude to dial's value.\n      setAltitude(altitudeWithoutPower);\n    } else {\n      setAltitudeWithoutPower(altitude);\n    }\n\n    setHasPower(!hasPower);\n    setLightIsOn(false);\n  }; // Update the altitude and turn light on or off if conditions are met.\n\n\n  const updateAltitude = () => {\n    if (hasPower) {\n      const currentAltitude = altitude;\n      const newAltitude = Number(document.getElementById('altitude').value);\n\n      if (currentAltitude >= bugValue && newAltitude < bugValue) {\n        setLightIsOn(true);\n      }\n\n      if (currentAltitude < bugValue && newAltitude >= bugValue) {\n        setLightIsOn(false);\n      }\n\n      setAltitude(newAltitude);\n    } else {\n      // Power is off, so keep track of what the altitude will be when power is turned on again.\n      setAltitudeWithoutPower(Number(document.getElementById('altitude').value));\n    }\n  };\n\n  const displayAltitudeValue = () => {\n    if (hasPower) {\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: altitude\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: altitudeWithoutPower\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  const updateBugValue = () => {\n    setBugValue(Number(document.getElementById('bugValue').value));\n  }; // Display flag if power is on.\n\n\n  const displayFlag = () => {\n    if (!hasPower) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image_pos\",\n        alt: \"\",\n        src: flagImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n    }\n  }; // Display bright light if power is on, otherwise display it with dull colour.\n\n\n  const displayLight = () => {\n    if (lightIsOn) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"onLight\",\n        style: {\n          top: imageDiameter / 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"offLight\",\n        style: {\n          top: imageDiameter / 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this);\n    }\n  }; // Update the position of the needle whenever the user changes the altitude\n  // This will only happen when the power is on.\n\n\n  useEffect(() => {\n    let deg;\n    const altitudeDialValue = Number(document.getElementById('altitude').value);\n\n    if (altitudeDialValue <= 500) {\n      deg = 180 * altitudeDialValue / 500;\n    } else {\n      deg = 180 + 45 * (altitudeDialValue - 500) / 500;\n    }\n\n    document.getElementById('needle').style.transform = `rotate(${deg}deg)`;\n  }, [altitude]); // Update the bug whenever the value is changed by the user.\n\n  useEffect(() => {\n    let deg;\n    const altitudeDialValue = Number(document.getElementById('bugValue').value);\n\n    if (altitudeDialValue <= 500) {\n      deg = 180 * altitudeDialValue / 500;\n    } else {\n      deg = 180 + 45 * (altitudeDialValue - 500) / 500;\n    }\n\n    document.getElementById('bug').style.transform = `rotate(${deg}deg)`;\n  }, [bugValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Radar Altimeter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"image_pos\",\n      onLoad: initialiseImageDiameter,\n      alt: \"scale\",\n      id: \"scale\",\n      src: scale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"image_pos\",\n      alt: \"cover\",\n      id: \"cover\",\n      src: cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"image_pos\",\n      alt: \"needle\",\n      id: \"needle\",\n      src: needle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"image_pos\",\n      alt: \"bug\",\n      id: \"bug\",\n      src: bugImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), displayFlag(), displayLight(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dials\",\n      style: {\n        top: imageDiameter\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Altitude:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          defaultValue: \"0\",\n          min: \"0\",\n          max: \"1500\",\n          id: \"altitude\",\n          onChange: updateAltitude\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), displayAltitudeValue()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bug:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          defaultValue: \"0\",\n          min: \"0\",\n          max: \"1500\",\n          id: \"bugValue\",\n          onChange: updateBugValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: bugValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Has Power:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"hasPower\",\n          name: \"hasPower\",\n          value: hasPower,\n          onClick: toggleHasPower\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tinvzzle2tK4BrFPgavJ/f+NeG8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alex/Documents/isim-test/src/App.js"],"names":["React","useEffect","useState","scale","cover","needle","bugImg","flagImg","App","hasPower","setHasPower","imageDiameter","setImageDiameter","altitude","setAltitude","altitudeWithoutPower","setAltitudeWithoutPower","bugValue","setBugValue","lightIsOn","setLightIsOn","initialiseImageDiameter","target","img","width","toggleHasPower","updateAltitude","currentAltitude","newAltitude","Number","document","getElementById","value","displayAltitudeValue","updateBugValue","displayFlag","displayLight","top","deg","altitudeDialValue","style","transform"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport scale from './assets/radaltback.png';\nimport cover from './assets/radaltcover.png';\nimport needle from './assets/radaltneedle.png';\nimport bugImg from './assets/bug.png';\nimport flagImg from './assets/radaltflag.png';\n\nfunction App() {\n  const [hasPower, setHasPower] = useState(false)\n  const [imageDiameter, setImageDiameter] = useState(0)\n  const [altitude, setAltitude] = useState(0)\n\n  // To store the altitude value when power is off and user changes dial position.\n  const [altitudeWithoutPower, setAltitudeWithoutPower] = useState(0)\n\n  const [bugValue, setBugValue] = useState(0)\n  const [lightIsOn, setLightIsOn] = useState(false)\n\n  // Get the diameter of the image for positioning dials.\n  const initialiseImageDiameter = ({ target: img }) => {\n    setImageDiameter(img.width)\n  }\n\n  const toggleHasPower = () => {\n    if (!hasPower) {\n      // Power is going to be turned on, so set altitude to dial's value.\n      setAltitude(altitudeWithoutPower)\n    } else {\n      setAltitudeWithoutPower(altitude)\n    }\n    setHasPower(!hasPower)\n    setLightIsOn(false)\n  }\n\n  // Update the altitude and turn light on or off if conditions are met.\n  const updateAltitude = () => {\n    if (hasPower) {\n      const currentAltitude = altitude\n      const newAltitude = Number(document.getElementById('altitude').value)\n\n      if (currentAltitude >= bugValue && newAltitude < bugValue) {\n        setLightIsOn(true)\n      }\n      if (currentAltitude < bugValue && newAltitude >= bugValue) {\n        setLightIsOn(false)\n      }\n\n      setAltitude(newAltitude)\n    } else {\n      // Power is off, so keep track of what the altitude will be when power is turned on again.\n      setAltitudeWithoutPower(Number(document.getElementById('altitude').value))\n    }\n  }\n\n  const displayAltitudeValue = () => {\n    if (hasPower) {\n      return <label>{altitude}</label>\n    } else {\n      return <label>{altitudeWithoutPower}</label>\n    }\n  }\n\n  const updateBugValue = () => {\n    setBugValue(Number(document.getElementById('bugValue').value))\n  }\n\n  // Display flag if power is on.\n  const displayFlag = () => {\n    if (!hasPower) {\n      return <img className='image_pos' alt='' src={flagImg} />\n    }\n  }\n\n  // Display bright light if power is on, otherwise display it with dull colour.\n  const displayLight = () => {\n    if (lightIsOn) {\n      return <span className='onLight' style={{top: imageDiameter / 2}}></span>\n    } else {\n      return <span className='offLight' style={{top: imageDiameter / 2}}></span>\n    }\n  }\n\n  // Update the position of the needle whenever the user changes the altitude\n  // This will only happen when the power is on.\n  useEffect(() => {\n    let deg;\n    const altitudeDialValue = Number(document.getElementById('altitude').value)\n    \n    if (altitudeDialValue <= 500) {\n      deg = 180 * altitudeDialValue / 500\n    } else {\n      deg = 180 + (45 * (altitudeDialValue - 500) / 500)\n    }\n\n    document.getElementById('needle').style.transform = `rotate(${deg}deg)`\n  }, [altitude])\n\n  // Update the bug whenever the value is changed by the user.\n  useEffect(() => {\n    let deg;\n    const altitudeDialValue = Number(document.getElementById('bugValue').value)\n    \n    if (altitudeDialValue <= 500) {\n      deg = 180 * altitudeDialValue / 500\n    } else {\n      deg = 180 + (45 * (altitudeDialValue - 500) / 500)\n    }\n\n    document.getElementById('bug').style.transform = `rotate(${deg}deg)`\n  }, [bugValue])\n\n  return (\n    <div>\n      <h1>Radar Altimeter</h1>\n\n      <img className='image_pos' onLoad={initialiseImageDiameter} alt='scale' id='scale' src={scale} />\n      <img className='image_pos' alt='cover' id='cover' src={cover} />\n      <img className='image_pos' alt='needle' id='needle' src={needle} />\n      <img className='image_pos' alt='bug' id='bug' src={bugImg} />\n      {displayFlag()}\n      {displayLight()}\n\n      <div className='dials' style={{top: imageDiameter}}>\n        <div>\n          <label>Altitude:</label>\n          <input type='range' defaultValue='0' min='0' max='1500' id='altitude' onChange={updateAltitude}></input>\n          {displayAltitudeValue()}\n        </div>\n          <div>\n            <label>Bug:</label>\n            <input type='range' defaultValue='0' min='0' max='1500' id='bugValue' onChange={updateBugValue}></input>\n            <label>{bugValue}</label>\n          </div>\n        <div>\n          <label>Has Power:</label>\n          <input type='checkbox' id='hasPower' name='hasPower' value={hasPower} onClick={toggleHasPower}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}